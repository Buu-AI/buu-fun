/* eslint-disable */
import * as types from "./graphql";
import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  "\n  mutation CreateApiKey($name: String!, $expiresIn: ExpirationInput) {\n    createApiKey(name: $name, expiresIn: $expiresIn) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.CreateApiKeyDocument;
  "\n  query SearchPaginatedApiKeys(\n    $pagination: Pagination\n    $filters: ApiKeyFilter\n  ) {\n    searchPaginatedApiKeys(pagination: $pagination, filters: $filters) {\n      ... on ApiKeyPage {\n        items {\n          _id\n          teamId\n          name\n          key\n          permissions\n          createdAt\n          updatedAt\n          expiresAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.SearchPaginatedApiKeysDocument;
  "\n  mutation DeleteApiKey($deleteApiKeyId: String!) {\n    deleteApiKey(id: $deleteApiKeyId) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.DeleteApiKeyDocument;
  "\n  mutation RotateApiKey($rotateApiKeyId: String!) {\n    rotateApiKey(id: $rotateApiKeyId) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.RotateApiKeyDocument;
  "\n  query GetUserShareableBoard(\n    $filters: ShareableBoardFilter\n    $pagination: Pagination\n  ) {\n    getUserShareableBoard(filters: $filters, pagination: $pagination) {\n      ... on ShareableBoardPage {\n        items {\n          _id\n          sessionId\n          title\n          teamId\n          models {\n            _id\n            teamId\n            sessionId\n            messageId\n            image {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            mesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            optimizedMesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            multiview {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            views {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            texturedMesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            texture {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n            prompt\n            style\n            nftId\n            toolRequest {\n              _id\n              teamId\n              sessionId\n              messageId\n              type\n              priority\n              payload\n              credits\n              status\n              createdAt\n              updatedAt\n              message\n              percentage\n            }\n          }\n          isPublic\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetUserShareableBoardDocument;
  "\n  mutation CreateShareableBoard($sessionId: String!) {\n    createShareableBoard(sessionId: $sessionId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.CreateShareableBoardDocument;
  "\n  mutation UpdateShareableBoardVisibility(\n    $isPublic: Boolean!\n    $shareableBoardId: String!\n  ) {\n    updateShareableBoardVisibility(\n      isPublic: $isPublic\n      shareableBoardId: $shareableBoardId\n    ) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.UpdateShareableBoardVisibilityDocument;
  "\n  mutation DeleteShareableBoard($shareableBoardId: String!) {\n    deleteShareableBoard(shareableBoardId: $shareableBoardId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.DeleteShareableBoardDocument;
  "\n  query GetShareableBoard($getShareableBoardId: String!) {\n    getShareableBoard(id: $getShareableBoardId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetShareableBoardDocument;
  "\n  query GetMessages(\n    $sessionId: String!\n    $filters: MessageFilter\n    $pagination: Pagination\n  ) {\n    getMessages(\n      sessionId: $sessionId\n      filters: $filters\n      pagination: $pagination\n    ) {\n      ... on MessagesPage {\n        items {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              toolRequest {\n                _id\n                teamId\n                sessionId\n                messageId\n                type\n                priority\n                payload\n                credits\n                status\n                createdAt\n                updatedAt\n                message\n                percentage\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetMessagesDocument;
  "\n  mutation CancelToolRequest($requestId: String!) {\n    cancelToolRequest(requestId: $requestId) {\n      ... on ToolRequest {\n        _id\n        teamId\n        sessionId\n        messageId\n        type\n        priority\n        payload\n        credits\n        status\n        createdAt\n        updatedAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.CancelToolRequestDocument;
  "\n  mutation GenerateModelFromImage(\n    $imageUrl: String!\n    $options: Options\n    $sessionId: String\n  ) {\n    generateModelFromImage(\n      imageUrl: $imageUrl\n      options: $options\n      sessionId: $sessionId\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GenerateModelFromImageDocument;
  "\n  mutation EditModel(\n    $modelId: String!\n    $edit: String!\n    $options: Options\n    $sessionId: String\n  ) {\n    editModel(\n      modelId: $modelId\n      edit: $edit\n      options: $options\n      sessionId: $sessionId\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.EditModelDocument;
  "\n  mutation SendMessage(\n    $sessionId: String!\n    $content: String!\n    $options: Options\n    $imageUrls: [String!]\n  ) {\n    sendMessage(\n      sessionId: $sessionId\n      content: $content\n      options: $options\n      imageUrls: $imageUrls\n    ) {\n      ... on Messages {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.SendMessageDocument;
  "\n  query GetSessions($pagination: Pagination, $filters: SessionFilter) {\n    getSessions(pagination: $pagination, filters: $filters) {\n      ... on SessionsPage {\n        items {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          title\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetSessionsDocument;
  "\n  mutation ConfirmToolRequest($requestId: String!) {\n    confirmToolRequest(requestId: $requestId) {\n      ... on ToolRequest {\n        _id\n        teamId\n        sessionId\n        messageId\n        type\n        priority\n        payload\n        credits\n        status\n        createdAt\n        updatedAt\n        message\n        percentage\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.ConfirmToolRequestDocument;
  "\n  mutation GenerateNft(\n    $description: String!\n    $name: String!\n    $modelId: String!\n    $attributes: [NftAttributeInput!]\n    $sessionId: String\n    $symbol: String\n  ) {\n    generateNft(\n      description: $description\n      name: $name\n      modelId: $modelId\n      attributes: $attributes\n      sessionId: $sessionId\n      symbol: $symbol\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GenerateNftDocument;
  "\n  query GetNfts($pagination: Pagination, $filters: NftFilter) {\n    getNfts(pagination: $pagination, filters: $filters) {\n      ... on NftPage {\n        items {\n          _id\n          teamId\n          genRequestId\n          messageId\n          modelId\n          status\n          metadata {\n            name\n            symbol\n            description\n            image\n            external_url\n            animation_url\n            attributes {\n              trait_type\n              value\n            }\n            properties {\n              files {\n                uri\n                type\n                cdn\n              }\n              category\n            }\n          }\n          mintAddress\n          collectionAddress\n          creator\n          tokenAddress\n          tokenStandard\n          collectionRoyalties\n          chain\n          updatedAt\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetNftsDocument;
  "\n  query GetNft($nftId: String!) {\n    getNft(nftId: $nftId) {\n      ... on Nft {\n        _id\n        teamId\n        genRequestId\n        messageId\n        modelId\n        status\n        mintAddress\n        collectionAddress\n        creator\n        tokenAddress\n        tokenStandard\n        collectionRoyalties\n        chain\n        updatedAt\n        createdAt\n        metadata {\n          name\n          symbol\n          description\n          image\n          external_url\n          animation_url\n          attributes {\n            trait_type\n            value\n          }\n          properties {\n            files {\n              uri\n              type\n              cdn\n            }\n            category\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetNftDocument;
  "\n  query GetTokenOverview {\n    getTokenOverview {\n      ... on BirdeyeTokenOverviewResponse {\n        address\n        description\n        price\n        totalSupply\n        marketCap\n        fullyDilutedValue\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetTokenOverviewDocument;
  "\n  query GetTokenHistoricalPriceResult($time: BirdeyeHistoricalDataTimeTypes!) {\n    getTokenHistoricalPriceResult(time: $time) {\n      ... on BirdeyeHistoricalPriceResponse {\n        items {\n          unixTime\n          value\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetTokenHistoricalPriceResultDocument;
  "\n  query GetStakingGlobalData {\n    getStakingGlobalData {\n      ... on GetStakingGlobalData {\n        apr\n        totalEffectiveAmount\n        totalRewardsPerDay\n        totalAmount\n        tokenMint {\n          address\n          decimals\n          supply\n          isInitialized\n          freezeAuthority\n          mintAuthority\n        }\n        stakeEntries {\n          publicKey\n          account {\n            authority\n            amount\n            duration\n            effectiveAmount\n            stakePool\n            nonce\n            payer\n            createdTs\n            closedTs\n            unstakeTs\n            priorTotalEffectiveStake\n            buffer\n          }\n        }\n        rewardPools {\n          publicKey\n          account {\n            authority\n            bump\n            buffer\n            creator\n            claimedAmount\n            fundedAmount\n            lastClaimPeriod\n            lastRewardAmount\n            lastRewardPeriod\n            lastAmountUpdateTs\n            lastPeriodUpdateTs\n            permissionless\n            rewardAmount\n            rewardPeriod\n            stakePool\n            createdTs\n            mint\n            nonce\n            vault\n          }\n        }\n        circulatingSupply\n        totalStakedByUsers\n        rewardEntries {\n          publicKey\n          account {\n            rewardPool\n            stakeEntry\n            createdTs\n            accountedAmount\n            claimedAmount\n            lastAccountedTs\n            lastRewardAmount\n            lastRewardPeriod\n            buffer\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetStakingGlobalDataDocument;
  "\n  query GetPrices {\n    getPrices {\n      ... on Prices {\n        buu\n        sol\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetPricesDocument;
  "\n  query GetReferralRewards(\n    $pagination: Pagination\n    $filters: ReferralRewardFilter\n  ) {\n    getReferralRewards(pagination: $pagination, filters: $filters) {\n      ... on ReferralRewardPage {\n        items {\n          _id\n          referral\n          referralName\n          referee\n          creditsPurchaseId\n          tokens\n          decimals\n          transactionHash\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetReferralRewardsDocument;
  "\n  query GetReferralAccount {\n    getReferralAccount {\n      ... on ReferralAccount {\n        _id\n        referralCode\n        refereeCode\n        referee {\n          _id\n          referralCode\n          refereeCode\n          linkedAt\n          createdAt\n        }\n        linkedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetReferralAccountDocument;
  "\n  mutation LinkReferralAccount($code: String!) {\n    linkReferralAccount(code: $code) {\n      ... on ReferralAccount {\n        _id\n        referralCode\n        refereeCode\n        referee {\n          _id\n          referralCode\n          refereeCode\n          linkedAt\n          createdAt\n        }\n        linkedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.LinkReferralAccountDocument;
  "\n  query GenerateCustomerPortalSession {\n    generateCustomerPortalSession {\n      customerPortalLink\n      planKey\n    }\n  }\n": typeof types.GenerateCustomerPortalSessionDocument;
  "\n  query GenerateSubscriptionPaymentLink($planKey: StripeSubscriptionPlanKeys!) {\n    generateSubscriptionPaymentLink(planKey: $planKey) {\n      ... on SuscriptionPaymentLinkOutput {\n        url\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GenerateSubscriptionPaymentLinkDocument;
  "\n  query GenerateCreditsPackagePaymentLink($pkg: CreditsPackageKeys!) {\n    generateCreditsPackagePaymentLink(pkg: $pkg) {\n      ... on Url {\n        url\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GenerateCreditsPackagePaymentLinkDocument;
  "\n  mutation GeneratePresignedUrl($input: GeneratePresignedUrlInput!) {\n    generatePresignedUrl(input: $input) {\n      ... on GeneratePresignedUrl {\n        presignedUrl\n        url\n        key\n        expiresIn\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GeneratePresignedUrlDocument;
  "\n  query GetMyCredits {\n    getMyCredits {\n      ... on Credit {\n        _id\n        available\n        pending\n        confirmed\n        updatedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.GetMyCreditsDocument;
  "\n  mutation RedeemVoucher($code: String!) {\n    redeemVoucher(code: $code) {\n      ... on Credit {\n        _id\n        available\n        pending\n        confirmed\n        updatedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": typeof types.RedeemVoucherDocument;
};
const documents: Documents = {
  "\n  mutation CreateApiKey($name: String!, $expiresIn: ExpirationInput) {\n    createApiKey(name: $name, expiresIn: $expiresIn) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.CreateApiKeyDocument,
  "\n  query SearchPaginatedApiKeys(\n    $pagination: Pagination\n    $filters: ApiKeyFilter\n  ) {\n    searchPaginatedApiKeys(pagination: $pagination, filters: $filters) {\n      ... on ApiKeyPage {\n        items {\n          _id\n          teamId\n          name\n          key\n          permissions\n          createdAt\n          updatedAt\n          expiresAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.SearchPaginatedApiKeysDocument,
  "\n  mutation DeleteApiKey($deleteApiKeyId: String!) {\n    deleteApiKey(id: $deleteApiKeyId) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.DeleteApiKeyDocument,
  "\n  mutation RotateApiKey($rotateApiKeyId: String!) {\n    rotateApiKey(id: $rotateApiKeyId) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.RotateApiKeyDocument,
  "\n  query GetUserShareableBoard(\n    $filters: ShareableBoardFilter\n    $pagination: Pagination\n  ) {\n    getUserShareableBoard(filters: $filters, pagination: $pagination) {\n      ... on ShareableBoardPage {\n        items {\n          _id\n          sessionId\n          title\n          teamId\n          models {\n            _id\n            teamId\n            sessionId\n            messageId\n            image {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            mesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            optimizedMesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            multiview {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            views {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            texturedMesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            texture {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n            prompt\n            style\n            nftId\n            toolRequest {\n              _id\n              teamId\n              sessionId\n              messageId\n              type\n              priority\n              payload\n              credits\n              status\n              createdAt\n              updatedAt\n              message\n              percentage\n            }\n          }\n          isPublic\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetUserShareableBoardDocument,
  "\n  mutation CreateShareableBoard($sessionId: String!) {\n    createShareableBoard(sessionId: $sessionId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.CreateShareableBoardDocument,
  "\n  mutation UpdateShareableBoardVisibility(\n    $isPublic: Boolean!\n    $shareableBoardId: String!\n  ) {\n    updateShareableBoardVisibility(\n      isPublic: $isPublic\n      shareableBoardId: $shareableBoardId\n    ) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.UpdateShareableBoardVisibilityDocument,
  "\n  mutation DeleteShareableBoard($shareableBoardId: String!) {\n    deleteShareableBoard(shareableBoardId: $shareableBoardId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.DeleteShareableBoardDocument,
  "\n  query GetShareableBoard($getShareableBoardId: String!) {\n    getShareableBoard(id: $getShareableBoardId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetShareableBoardDocument,
  "\n  query GetMessages(\n    $sessionId: String!\n    $filters: MessageFilter\n    $pagination: Pagination\n  ) {\n    getMessages(\n      sessionId: $sessionId\n      filters: $filters\n      pagination: $pagination\n    ) {\n      ... on MessagesPage {\n        items {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              toolRequest {\n                _id\n                teamId\n                sessionId\n                messageId\n                type\n                priority\n                payload\n                credits\n                status\n                createdAt\n                updatedAt\n                message\n                percentage\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetMessagesDocument,
  "\n  mutation CancelToolRequest($requestId: String!) {\n    cancelToolRequest(requestId: $requestId) {\n      ... on ToolRequest {\n        _id\n        teamId\n        sessionId\n        messageId\n        type\n        priority\n        payload\n        credits\n        status\n        createdAt\n        updatedAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.CancelToolRequestDocument,
  "\n  mutation GenerateModelFromImage(\n    $imageUrl: String!\n    $options: Options\n    $sessionId: String\n  ) {\n    generateModelFromImage(\n      imageUrl: $imageUrl\n      options: $options\n      sessionId: $sessionId\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GenerateModelFromImageDocument,
  "\n  mutation EditModel(\n    $modelId: String!\n    $edit: String!\n    $options: Options\n    $sessionId: String\n  ) {\n    editModel(\n      modelId: $modelId\n      edit: $edit\n      options: $options\n      sessionId: $sessionId\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.EditModelDocument,
  "\n  mutation SendMessage(\n    $sessionId: String!\n    $content: String!\n    $options: Options\n    $imageUrls: [String!]\n  ) {\n    sendMessage(\n      sessionId: $sessionId\n      content: $content\n      options: $options\n      imageUrls: $imageUrls\n    ) {\n      ... on Messages {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.SendMessageDocument,
  "\n  query GetSessions($pagination: Pagination, $filters: SessionFilter) {\n    getSessions(pagination: $pagination, filters: $filters) {\n      ... on SessionsPage {\n        items {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          title\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetSessionsDocument,
  "\n  mutation ConfirmToolRequest($requestId: String!) {\n    confirmToolRequest(requestId: $requestId) {\n      ... on ToolRequest {\n        _id\n        teamId\n        sessionId\n        messageId\n        type\n        priority\n        payload\n        credits\n        status\n        createdAt\n        updatedAt\n        message\n        percentage\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.ConfirmToolRequestDocument,
  "\n  mutation GenerateNft(\n    $description: String!\n    $name: String!\n    $modelId: String!\n    $attributes: [NftAttributeInput!]\n    $sessionId: String\n    $symbol: String\n  ) {\n    generateNft(\n      description: $description\n      name: $name\n      modelId: $modelId\n      attributes: $attributes\n      sessionId: $sessionId\n      symbol: $symbol\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GenerateNftDocument,
  "\n  query GetNfts($pagination: Pagination, $filters: NftFilter) {\n    getNfts(pagination: $pagination, filters: $filters) {\n      ... on NftPage {\n        items {\n          _id\n          teamId\n          genRequestId\n          messageId\n          modelId\n          status\n          metadata {\n            name\n            symbol\n            description\n            image\n            external_url\n            animation_url\n            attributes {\n              trait_type\n              value\n            }\n            properties {\n              files {\n                uri\n                type\n                cdn\n              }\n              category\n            }\n          }\n          mintAddress\n          collectionAddress\n          creator\n          tokenAddress\n          tokenStandard\n          collectionRoyalties\n          chain\n          updatedAt\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetNftsDocument,
  "\n  query GetNft($nftId: String!) {\n    getNft(nftId: $nftId) {\n      ... on Nft {\n        _id\n        teamId\n        genRequestId\n        messageId\n        modelId\n        status\n        mintAddress\n        collectionAddress\n        creator\n        tokenAddress\n        tokenStandard\n        collectionRoyalties\n        chain\n        updatedAt\n        createdAt\n        metadata {\n          name\n          symbol\n          description\n          image\n          external_url\n          animation_url\n          attributes {\n            trait_type\n            value\n          }\n          properties {\n            files {\n              uri\n              type\n              cdn\n            }\n            category\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetNftDocument,
  "\n  query GetTokenOverview {\n    getTokenOverview {\n      ... on BirdeyeTokenOverviewResponse {\n        address\n        description\n        price\n        totalSupply\n        marketCap\n        fullyDilutedValue\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetTokenOverviewDocument,
  "\n  query GetTokenHistoricalPriceResult($time: BirdeyeHistoricalDataTimeTypes!) {\n    getTokenHistoricalPriceResult(time: $time) {\n      ... on BirdeyeHistoricalPriceResponse {\n        items {\n          unixTime\n          value\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetTokenHistoricalPriceResultDocument,
  "\n  query GetStakingGlobalData {\n    getStakingGlobalData {\n      ... on GetStakingGlobalData {\n        apr\n        totalEffectiveAmount\n        totalRewardsPerDay\n        totalAmount\n        tokenMint {\n          address\n          decimals\n          supply\n          isInitialized\n          freezeAuthority\n          mintAuthority\n        }\n        stakeEntries {\n          publicKey\n          account {\n            authority\n            amount\n            duration\n            effectiveAmount\n            stakePool\n            nonce\n            payer\n            createdTs\n            closedTs\n            unstakeTs\n            priorTotalEffectiveStake\n            buffer\n          }\n        }\n        rewardPools {\n          publicKey\n          account {\n            authority\n            bump\n            buffer\n            creator\n            claimedAmount\n            fundedAmount\n            lastClaimPeriod\n            lastRewardAmount\n            lastRewardPeriod\n            lastAmountUpdateTs\n            lastPeriodUpdateTs\n            permissionless\n            rewardAmount\n            rewardPeriod\n            stakePool\n            createdTs\n            mint\n            nonce\n            vault\n          }\n        }\n        circulatingSupply\n        totalStakedByUsers\n        rewardEntries {\n          publicKey\n          account {\n            rewardPool\n            stakeEntry\n            createdTs\n            accountedAmount\n            claimedAmount\n            lastAccountedTs\n            lastRewardAmount\n            lastRewardPeriod\n            buffer\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetStakingGlobalDataDocument,
  "\n  query GetPrices {\n    getPrices {\n      ... on Prices {\n        buu\n        sol\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetPricesDocument,
  "\n  query GetReferralRewards(\n    $pagination: Pagination\n    $filters: ReferralRewardFilter\n  ) {\n    getReferralRewards(pagination: $pagination, filters: $filters) {\n      ... on ReferralRewardPage {\n        items {\n          _id\n          referral\n          referralName\n          referee\n          creditsPurchaseId\n          tokens\n          decimals\n          transactionHash\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetReferralRewardsDocument,
  "\n  query GetReferralAccount {\n    getReferralAccount {\n      ... on ReferralAccount {\n        _id\n        referralCode\n        refereeCode\n        referee {\n          _id\n          referralCode\n          refereeCode\n          linkedAt\n          createdAt\n        }\n        linkedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetReferralAccountDocument,
  "\n  mutation LinkReferralAccount($code: String!) {\n    linkReferralAccount(code: $code) {\n      ... on ReferralAccount {\n        _id\n        referralCode\n        refereeCode\n        referee {\n          _id\n          referralCode\n          refereeCode\n          linkedAt\n          createdAt\n        }\n        linkedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.LinkReferralAccountDocument,
  "\n  query GenerateCustomerPortalSession {\n    generateCustomerPortalSession {\n      customerPortalLink\n      planKey\n    }\n  }\n":
    types.GenerateCustomerPortalSessionDocument,
  "\n  query GenerateSubscriptionPaymentLink($planKey: StripeSubscriptionPlanKeys!) {\n    generateSubscriptionPaymentLink(planKey: $planKey) {\n      ... on SuscriptionPaymentLinkOutput {\n        url\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GenerateSubscriptionPaymentLinkDocument,
  "\n  query GenerateCreditsPackagePaymentLink($pkg: CreditsPackageKeys!) {\n    generateCreditsPackagePaymentLink(pkg: $pkg) {\n      ... on Url {\n        url\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GenerateCreditsPackagePaymentLinkDocument,
  "\n  mutation GeneratePresignedUrl($input: GeneratePresignedUrlInput!) {\n    generatePresignedUrl(input: $input) {\n      ... on GeneratePresignedUrl {\n        presignedUrl\n        url\n        key\n        expiresIn\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GeneratePresignedUrlDocument,
  "\n  query GetMyCredits {\n    getMyCredits {\n      ... on Credit {\n        _id\n        available\n        pending\n        confirmed\n        updatedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.GetMyCreditsDocument,
  "\n  mutation RedeemVoucher($code: String!) {\n    redeemVoucher(code: $code) {\n      ... on Credit {\n        _id\n        available\n        pending\n        confirmed\n        updatedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n":
    types.RedeemVoucherDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation CreateApiKey($name: String!, $expiresIn: ExpirationInput) {\n    createApiKey(name: $name, expiresIn: $expiresIn) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation CreateApiKey($name: String!, $expiresIn: ExpirationInput) {\n    createApiKey(name: $name, expiresIn: $expiresIn) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query SearchPaginatedApiKeys(\n    $pagination: Pagination\n    $filters: ApiKeyFilter\n  ) {\n    searchPaginatedApiKeys(pagination: $pagination, filters: $filters) {\n      ... on ApiKeyPage {\n        items {\n          _id\n          teamId\n          name\n          key\n          permissions\n          createdAt\n          updatedAt\n          expiresAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query SearchPaginatedApiKeys(\n    $pagination: Pagination\n    $filters: ApiKeyFilter\n  ) {\n    searchPaginatedApiKeys(pagination: $pagination, filters: $filters) {\n      ... on ApiKeyPage {\n        items {\n          _id\n          teamId\n          name\n          key\n          permissions\n          createdAt\n          updatedAt\n          expiresAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation DeleteApiKey($deleteApiKeyId: String!) {\n    deleteApiKey(id: $deleteApiKeyId) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation DeleteApiKey($deleteApiKeyId: String!) {\n    deleteApiKey(id: $deleteApiKeyId) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation RotateApiKey($rotateApiKeyId: String!) {\n    rotateApiKey(id: $rotateApiKeyId) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation RotateApiKey($rotateApiKeyId: String!) {\n    rotateApiKey(id: $rotateApiKeyId) {\n      ... on ApiKey {\n        _id\n        teamId\n        name\n        key\n        permissions\n        createdAt\n        updatedAt\n        expiresAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetUserShareableBoard(\n    $filters: ShareableBoardFilter\n    $pagination: Pagination\n  ) {\n    getUserShareableBoard(filters: $filters, pagination: $pagination) {\n      ... on ShareableBoardPage {\n        items {\n          _id\n          sessionId\n          title\n          teamId\n          models {\n            _id\n            teamId\n            sessionId\n            messageId\n            image {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            mesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            optimizedMesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            multiview {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            views {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            texturedMesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            texture {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n            prompt\n            style\n            nftId\n            toolRequest {\n              _id\n              teamId\n              sessionId\n              messageId\n              type\n              priority\n              payload\n              credits\n              status\n              createdAt\n              updatedAt\n              message\n              percentage\n            }\n          }\n          isPublic\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetUserShareableBoard(\n    $filters: ShareableBoardFilter\n    $pagination: Pagination\n  ) {\n    getUserShareableBoard(filters: $filters, pagination: $pagination) {\n      ... on ShareableBoardPage {\n        items {\n          _id\n          sessionId\n          title\n          teamId\n          models {\n            _id\n            teamId\n            sessionId\n            messageId\n            image {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            mesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            optimizedMesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            multiview {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            views {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            texturedMesh {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            texture {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n            prompt\n            style\n            nftId\n            toolRequest {\n              _id\n              teamId\n              sessionId\n              messageId\n              type\n              priority\n              payload\n              credits\n              status\n              createdAt\n              updatedAt\n              message\n              percentage\n            }\n          }\n          isPublic\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation CreateShareableBoard($sessionId: String!) {\n    createShareableBoard(sessionId: $sessionId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation CreateShareableBoard($sessionId: String!) {\n    createShareableBoard(sessionId: $sessionId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation UpdateShareableBoardVisibility(\n    $isPublic: Boolean!\n    $shareableBoardId: String!\n  ) {\n    updateShareableBoardVisibility(\n      isPublic: $isPublic\n      shareableBoardId: $shareableBoardId\n    ) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation UpdateShareableBoardVisibility(\n    $isPublic: Boolean!\n    $shareableBoardId: String!\n  ) {\n    updateShareableBoardVisibility(\n      isPublic: $isPublic\n      shareableBoardId: $shareableBoardId\n    ) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation DeleteShareableBoard($shareableBoardId: String!) {\n    deleteShareableBoard(shareableBoardId: $shareableBoardId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation DeleteShareableBoard($shareableBoardId: String!) {\n    deleteShareableBoard(shareableBoardId: $shareableBoardId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetShareableBoard($getShareableBoardId: String!) {\n    getShareableBoard(id: $getShareableBoardId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetShareableBoard($getShareableBoardId: String!) {\n    getShareableBoard(id: $getShareableBoardId) {\n      ... on ShareableBoard {\n        _id\n        sessionId\n        title\n        teamId\n        models {\n          _id\n          teamId\n          sessionId\n          messageId\n          image {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          mesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          optimizedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          multiview {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          views {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texturedMesh {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          texture {\n            alt\n            keyS3\n            size\n            type\n            url\n            _id\n            teamId\n            sessionId\n            messageId\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n          prompt\n          style\n          nftId\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        isPublic\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetMessages(\n    $sessionId: String!\n    $filters: MessageFilter\n    $pagination: Pagination\n  ) {\n    getMessages(\n      sessionId: $sessionId\n      filters: $filters\n      pagination: $pagination\n    ) {\n      ... on MessagesPage {\n        items {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              toolRequest {\n                _id\n                teamId\n                sessionId\n                messageId\n                type\n                priority\n                payload\n                credits\n                status\n                createdAt\n                updatedAt\n                message\n                percentage\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetMessages(\n    $sessionId: String!\n    $filters: MessageFilter\n    $pagination: Pagination\n  ) {\n    getMessages(\n      sessionId: $sessionId\n      filters: $filters\n      pagination: $pagination\n    ) {\n      ... on MessagesPage {\n        items {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              toolRequest {\n                _id\n                teamId\n                sessionId\n                messageId\n                type\n                priority\n                payload\n                credits\n                status\n                createdAt\n                updatedAt\n                message\n                percentage\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation CancelToolRequest($requestId: String!) {\n    cancelToolRequest(requestId: $requestId) {\n      ... on ToolRequest {\n        _id\n        teamId\n        sessionId\n        messageId\n        type\n        priority\n        payload\n        credits\n        status\n        createdAt\n        updatedAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation CancelToolRequest($requestId: String!) {\n    cancelToolRequest(requestId: $requestId) {\n      ... on ToolRequest {\n        _id\n        teamId\n        sessionId\n        messageId\n        type\n        priority\n        payload\n        credits\n        status\n        createdAt\n        updatedAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation GenerateModelFromImage(\n    $imageUrl: String!\n    $options: Options\n    $sessionId: String\n  ) {\n    generateModelFromImage(\n      imageUrl: $imageUrl\n      options: $options\n      sessionId: $sessionId\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation GenerateModelFromImage(\n    $imageUrl: String!\n    $options: Options\n    $sessionId: String\n  ) {\n    generateModelFromImage(\n      imageUrl: $imageUrl\n      options: $options\n      sessionId: $sessionId\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation EditModel(\n    $modelId: String!\n    $edit: String!\n    $options: Options\n    $sessionId: String\n  ) {\n    editModel(\n      modelId: $modelId\n      edit: $edit\n      options: $options\n      sessionId: $sessionId\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation EditModel(\n    $modelId: String!\n    $edit: String!\n    $options: Options\n    $sessionId: String\n  ) {\n    editModel(\n      modelId: $modelId\n      edit: $edit\n      options: $options\n      sessionId: $sessionId\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation SendMessage(\n    $sessionId: String!\n    $content: String!\n    $options: Options\n    $imageUrls: [String!]\n  ) {\n    sendMessage(\n      sessionId: $sessionId\n      content: $content\n      options: $options\n      imageUrls: $imageUrls\n    ) {\n      ... on Messages {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation SendMessage(\n    $sessionId: String!\n    $content: String!\n    $options: Options\n    $imageUrls: [String!]\n  ) {\n    sendMessage(\n      sessionId: $sessionId\n      content: $content\n      options: $options\n      imageUrls: $imageUrls\n    ) {\n      ... on Messages {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetSessions($pagination: Pagination, $filters: SessionFilter) {\n    getSessions(pagination: $pagination, filters: $filters) {\n      ... on SessionsPage {\n        items {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          title\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetSessions($pagination: Pagination, $filters: SessionFilter) {\n    getSessions(pagination: $pagination, filters: $filters) {\n      ... on SessionsPage {\n        items {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          title\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation ConfirmToolRequest($requestId: String!) {\n    confirmToolRequest(requestId: $requestId) {\n      ... on ToolRequest {\n        _id\n        teamId\n        sessionId\n        messageId\n        type\n        priority\n        payload\n        credits\n        status\n        createdAt\n        updatedAt\n        message\n        percentage\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation ConfirmToolRequest($requestId: String!) {\n    confirmToolRequest(requestId: $requestId) {\n      ... on ToolRequest {\n        _id\n        teamId\n        sessionId\n        messageId\n        type\n        priority\n        payload\n        credits\n        status\n        createdAt\n        updatedAt\n        message\n        percentage\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation GenerateNft(\n    $description: String!\n    $name: String!\n    $modelId: String!\n    $attributes: [NftAttributeInput!]\n    $sessionId: String\n    $symbol: String\n  ) {\n    generateNft(\n      description: $description\n      name: $name\n      modelId: $modelId\n      attributes: $attributes\n      sessionId: $sessionId\n      symbol: $symbol\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation GenerateNft(\n    $description: String!\n    $name: String!\n    $modelId: String!\n    $attributes: [NftAttributeInput!]\n    $sessionId: String\n    $symbol: String\n  ) {\n    generateNft(\n      description: $description\n      name: $name\n      modelId: $modelId\n      attributes: $attributes\n      sessionId: $sessionId\n      symbol: $symbol\n    ) {\n      ... on ToolRequestConfirmation {\n        messages {\n          _id\n          createdAt\n          updatedAt\n          teamId\n          sessionId\n          role\n          content {\n            text\n            models {\n              _id\n              teamId\n              sessionId\n              messageId\n              image {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              mesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              optimizedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              multiview {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              views {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texturedMesh {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              texture {\n                alt\n                keyS3\n                size\n                type\n                url\n                _id\n                teamId\n                sessionId\n                messageId\n                createdAt\n                updatedAt\n              }\n              createdAt\n              updatedAt\n              prompt\n              style\n              nftId\n            }\n            medias {\n              alt\n              keyS3\n              size\n              type\n              url\n              _id\n              teamId\n              sessionId\n              messageId\n              createdAt\n              updatedAt\n            }\n            nfts {\n              _id\n              teamId\n              genRequestId\n              messageId\n              modelId\n              status\n              metadata {\n                name\n                symbol\n                description\n                image\n                external_url\n                animation_url\n                attributes {\n                  trait_type\n                  value\n                }\n                properties {\n                  files {\n                    uri\n                    type\n                    cdn\n                  }\n                  category\n                }\n              }\n              mintAddress\n              collectionAddress\n              creator\n              tokenAddress\n              tokenStandard\n              collectionRoyalties\n              chain\n              updatedAt\n              createdAt\n            }\n          }\n          toolRequest {\n            _id\n            teamId\n            sessionId\n            messageId\n            type\n            priority\n            payload\n            credits\n            status\n            createdAt\n            updatedAt\n            message\n            percentage\n          }\n        }\n        toolRequest {\n          _id\n          teamId\n          sessionId\n          messageId\n          type\n          priority\n          payload\n          credits\n          status\n          createdAt\n          updatedAt\n          message\n          percentage\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetNfts($pagination: Pagination, $filters: NftFilter) {\n    getNfts(pagination: $pagination, filters: $filters) {\n      ... on NftPage {\n        items {\n          _id\n          teamId\n          genRequestId\n          messageId\n          modelId\n          status\n          metadata {\n            name\n            symbol\n            description\n            image\n            external_url\n            animation_url\n            attributes {\n              trait_type\n              value\n            }\n            properties {\n              files {\n                uri\n                type\n                cdn\n              }\n              category\n            }\n          }\n          mintAddress\n          collectionAddress\n          creator\n          tokenAddress\n          tokenStandard\n          collectionRoyalties\n          chain\n          updatedAt\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetNfts($pagination: Pagination, $filters: NftFilter) {\n    getNfts(pagination: $pagination, filters: $filters) {\n      ... on NftPage {\n        items {\n          _id\n          teamId\n          genRequestId\n          messageId\n          modelId\n          status\n          metadata {\n            name\n            symbol\n            description\n            image\n            external_url\n            animation_url\n            attributes {\n              trait_type\n              value\n            }\n            properties {\n              files {\n                uri\n                type\n                cdn\n              }\n              category\n            }\n          }\n          mintAddress\n          collectionAddress\n          creator\n          tokenAddress\n          tokenStandard\n          collectionRoyalties\n          chain\n          updatedAt\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetNft($nftId: String!) {\n    getNft(nftId: $nftId) {\n      ... on Nft {\n        _id\n        teamId\n        genRequestId\n        messageId\n        modelId\n        status\n        mintAddress\n        collectionAddress\n        creator\n        tokenAddress\n        tokenStandard\n        collectionRoyalties\n        chain\n        updatedAt\n        createdAt\n        metadata {\n          name\n          symbol\n          description\n          image\n          external_url\n          animation_url\n          attributes {\n            trait_type\n            value\n          }\n          properties {\n            files {\n              uri\n              type\n              cdn\n            }\n            category\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetNft($nftId: String!) {\n    getNft(nftId: $nftId) {\n      ... on Nft {\n        _id\n        teamId\n        genRequestId\n        messageId\n        modelId\n        status\n        mintAddress\n        collectionAddress\n        creator\n        tokenAddress\n        tokenStandard\n        collectionRoyalties\n        chain\n        updatedAt\n        createdAt\n        metadata {\n          name\n          symbol\n          description\n          image\n          external_url\n          animation_url\n          attributes {\n            trait_type\n            value\n          }\n          properties {\n            files {\n              uri\n              type\n              cdn\n            }\n            category\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetTokenOverview {\n    getTokenOverview {\n      ... on BirdeyeTokenOverviewResponse {\n        address\n        description\n        price\n        totalSupply\n        marketCap\n        fullyDilutedValue\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetTokenOverview {\n    getTokenOverview {\n      ... on BirdeyeTokenOverviewResponse {\n        address\n        description\n        price\n        totalSupply\n        marketCap\n        fullyDilutedValue\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetTokenHistoricalPriceResult($time: BirdeyeHistoricalDataTimeTypes!) {\n    getTokenHistoricalPriceResult(time: $time) {\n      ... on BirdeyeHistoricalPriceResponse {\n        items {\n          unixTime\n          value\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetTokenHistoricalPriceResult($time: BirdeyeHistoricalDataTimeTypes!) {\n    getTokenHistoricalPriceResult(time: $time) {\n      ... on BirdeyeHistoricalPriceResponse {\n        items {\n          unixTime\n          value\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetStakingGlobalData {\n    getStakingGlobalData {\n      ... on GetStakingGlobalData {\n        apr\n        totalEffectiveAmount\n        totalRewardsPerDay\n        totalAmount\n        tokenMint {\n          address\n          decimals\n          supply\n          isInitialized\n          freezeAuthority\n          mintAuthority\n        }\n        stakeEntries {\n          publicKey\n          account {\n            authority\n            amount\n            duration\n            effectiveAmount\n            stakePool\n            nonce\n            payer\n            createdTs\n            closedTs\n            unstakeTs\n            priorTotalEffectiveStake\n            buffer\n          }\n        }\n        rewardPools {\n          publicKey\n          account {\n            authority\n            bump\n            buffer\n            creator\n            claimedAmount\n            fundedAmount\n            lastClaimPeriod\n            lastRewardAmount\n            lastRewardPeriod\n            lastAmountUpdateTs\n            lastPeriodUpdateTs\n            permissionless\n            rewardAmount\n            rewardPeriod\n            stakePool\n            createdTs\n            mint\n            nonce\n            vault\n          }\n        }\n        circulatingSupply\n        totalStakedByUsers\n        rewardEntries {\n          publicKey\n          account {\n            rewardPool\n            stakeEntry\n            createdTs\n            accountedAmount\n            claimedAmount\n            lastAccountedTs\n            lastRewardAmount\n            lastRewardPeriod\n            buffer\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetStakingGlobalData {\n    getStakingGlobalData {\n      ... on GetStakingGlobalData {\n        apr\n        totalEffectiveAmount\n        totalRewardsPerDay\n        totalAmount\n        tokenMint {\n          address\n          decimals\n          supply\n          isInitialized\n          freezeAuthority\n          mintAuthority\n        }\n        stakeEntries {\n          publicKey\n          account {\n            authority\n            amount\n            duration\n            effectiveAmount\n            stakePool\n            nonce\n            payer\n            createdTs\n            closedTs\n            unstakeTs\n            priorTotalEffectiveStake\n            buffer\n          }\n        }\n        rewardPools {\n          publicKey\n          account {\n            authority\n            bump\n            buffer\n            creator\n            claimedAmount\n            fundedAmount\n            lastClaimPeriod\n            lastRewardAmount\n            lastRewardPeriod\n            lastAmountUpdateTs\n            lastPeriodUpdateTs\n            permissionless\n            rewardAmount\n            rewardPeriod\n            stakePool\n            createdTs\n            mint\n            nonce\n            vault\n          }\n        }\n        circulatingSupply\n        totalStakedByUsers\n        rewardEntries {\n          publicKey\n          account {\n            rewardPool\n            stakeEntry\n            createdTs\n            accountedAmount\n            claimedAmount\n            lastAccountedTs\n            lastRewardAmount\n            lastRewardPeriod\n            buffer\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetPrices {\n    getPrices {\n      ... on Prices {\n        buu\n        sol\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetPrices {\n    getPrices {\n      ... on Prices {\n        buu\n        sol\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetReferralRewards(\n    $pagination: Pagination\n    $filters: ReferralRewardFilter\n  ) {\n    getReferralRewards(pagination: $pagination, filters: $filters) {\n      ... on ReferralRewardPage {\n        items {\n          _id\n          referral\n          referralName\n          referee\n          creditsPurchaseId\n          tokens\n          decimals\n          transactionHash\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetReferralRewards(\n    $pagination: Pagination\n    $filters: ReferralRewardFilter\n  ) {\n    getReferralRewards(pagination: $pagination, filters: $filters) {\n      ... on ReferralRewardPage {\n        items {\n          _id\n          referral\n          referralName\n          referee\n          creditsPurchaseId\n          tokens\n          decimals\n          transactionHash\n          createdAt\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          total\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetReferralAccount {\n    getReferralAccount {\n      ... on ReferralAccount {\n        _id\n        referralCode\n        refereeCode\n        referee {\n          _id\n          referralCode\n          refereeCode\n          linkedAt\n          createdAt\n        }\n        linkedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetReferralAccount {\n    getReferralAccount {\n      ... on ReferralAccount {\n        _id\n        referralCode\n        refereeCode\n        referee {\n          _id\n          referralCode\n          refereeCode\n          linkedAt\n          createdAt\n        }\n        linkedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation LinkReferralAccount($code: String!) {\n    linkReferralAccount(code: $code) {\n      ... on ReferralAccount {\n        _id\n        referralCode\n        refereeCode\n        referee {\n          _id\n          referralCode\n          refereeCode\n          linkedAt\n          createdAt\n        }\n        linkedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation LinkReferralAccount($code: String!) {\n    linkReferralAccount(code: $code) {\n      ... on ReferralAccount {\n        _id\n        referralCode\n        refereeCode\n        referee {\n          _id\n          referralCode\n          refereeCode\n          linkedAt\n          createdAt\n        }\n        linkedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GenerateCustomerPortalSession {\n    generateCustomerPortalSession {\n      customerPortalLink\n      planKey\n    }\n  }\n",
): (typeof documents)["\n  query GenerateCustomerPortalSession {\n    generateCustomerPortalSession {\n      customerPortalLink\n      planKey\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GenerateSubscriptionPaymentLink($planKey: StripeSubscriptionPlanKeys!) {\n    generateSubscriptionPaymentLink(planKey: $planKey) {\n      ... on SuscriptionPaymentLinkOutput {\n        url\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GenerateSubscriptionPaymentLink($planKey: StripeSubscriptionPlanKeys!) {\n    generateSubscriptionPaymentLink(planKey: $planKey) {\n      ... on SuscriptionPaymentLinkOutput {\n        url\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GenerateCreditsPackagePaymentLink($pkg: CreditsPackageKeys!) {\n    generateCreditsPackagePaymentLink(pkg: $pkg) {\n      ... on Url {\n        url\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GenerateCreditsPackagePaymentLink($pkg: CreditsPackageKeys!) {\n    generateCreditsPackagePaymentLink(pkg: $pkg) {\n      ... on Url {\n        url\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation GeneratePresignedUrl($input: GeneratePresignedUrlInput!) {\n    generatePresignedUrl(input: $input) {\n      ... on GeneratePresignedUrl {\n        presignedUrl\n        url\n        key\n        expiresIn\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation GeneratePresignedUrl($input: GeneratePresignedUrlInput!) {\n    generatePresignedUrl(input: $input) {\n      ... on GeneratePresignedUrl {\n        presignedUrl\n        url\n        key\n        expiresIn\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetMyCredits {\n    getMyCredits {\n      ... on Credit {\n        _id\n        available\n        pending\n        confirmed\n        updatedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetMyCredits {\n    getMyCredits {\n      ... on Credit {\n        _id\n        available\n        pending\n        confirmed\n        updatedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  mutation RedeemVoucher($code: String!) {\n    redeemVoucher(code: $code) {\n      ... on Credit {\n        _id\n        available\n        pending\n        confirmed\n        updatedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n",
): (typeof documents)["\n  mutation RedeemVoucher($code: String!) {\n    redeemVoucher(code: $code) {\n      ... on Credit {\n        _id\n        available\n        pending\n        confirmed\n        updatedAt\n        createdAt\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
